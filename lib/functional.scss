@use "sass:list";
@use "sass:meta";

@function all($predicate, $list) {
    @each $element in $list {
        @if meta.call($predicate, $element) {
            @return false;
        }
    }

    @return true;
}

@function any($predicate, $list) {
    @each $element in $list {
        @if meta.call($predicate, $element) {
            @return true;
        }
    }

    @return false;
}

@function first($list) {
    @return list.nth($list, 1);
}

@function last($list) {
    @return list.nth($list, -1);
}

@function new_from($list) {
    $_lout: ();
    $separator: list.separator($list);

    @if list.is_bracketed($list) {
        $_lout: [];
    }

    @return ($_lout, $separator);
}

@function map($func, $list) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    @each $element in $list {
        $_lout: list.append($_lout, meta.call($func, $element), $separator);
    }

    @return $_lout;
}

@function remove($list, $element) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    $index: list.index($list, $element);
    $length: list.length($list);

    @for $i from 1 to $index {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @if $index == $length {
        @return $_lout;
    }

    @for $i from $index + 1 through $length {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @return $_lout;
}

@function bind($func, $var) {
    @if meta.type_of($func) == "list" {
        @return list.append($func, $var);
    }
    @return ($func, $var);
}

// alternative to meta.call(func.bind($f, $i)...);
@function call($args) {
    @return meta.call($args...);
}