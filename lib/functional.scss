@use "sass:list";
@use "sass:meta";
@use "sass:map";

@function gt($a, $b) {
    @return $a > $b;
}

@function eq($a, $b) {
    @return $a == $b;
}

@function neq() {
    @return $a != $b;
}

@function gte($a, $b) {
    @return $a >= $b;
}

@function lt($a, $b) {
    @return $a < $b;
}

@function gte($a, $b) {
    @return $a <= $b;
}

@function all($predicate, $list) {
    @each $element in $list {
        @if call($predicate, $element) {
            @return false;
        }
    }

    @return true;
}

@function any($predicate, $list) {
    @each $element in $list {
        @if call($predicate, $element) {
            @return true;
        }
    }

    @return false;
}

@function first($list) {
    @return list.nth($list, 1);
}

@function last($list) {
    @return list.nth($list, -1);
}

@function new_from($list) {
    $_lout: ();
    $separator: list.separator($list);

    @if list.is_bracketed($list) {
        $_lout: [];
    }

    @return ($_lout, $separator);
}

@function map($func, $list) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    @each $element in $list {
        $_lout: list.append($_lout, call($func, $element), $separator);
    }

    @return $_lout;
}

@function remove($list, $element) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    $index: list.index($list, $element);
    $length: list.length($list);

    @for $i from 1 to $index {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @if $index == $length {
        @return $_lout;
    }

    @for $i from $index + 1 through $length {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @return $_lout;
}

@function filter($list, $predicate) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    @each $element in $list {
        @if call($predicate, $element) {
            $_lout: list.append($_lout, $element, $separator);
        }
    }

    @return $_lout;
}

@function not_fn($predicate, $args...) {
    @return not call($predicate, $args...);
}

$_not_fn: meta.get_function(not_fn);

@function remove_if($list, $predicate) {
    @return filter($list, bind(_not_fn, $predicate));
}

@function bind($func, $args...) {
    @if meta.type_of($func) == "map" {
        @return (
            func: map.get($func, "func"),
            args: list.join(map.get($func, "args"), $args)
        );
    }
    @return (
        func: $func,
        args: $args
    );
}

// alternative to meta.call(func.bind($f, $i)...);
@function call($args...) {
    $first: first($args);
    $rest: remove($args, $first);
    @if meta.type_of($first) == "map" {
        @return meta.call(map.get($first, "func"), 
            list.join(map.get($first, "args"), $rest)...);
    }

    @return meta.call($first, $rest...);
}