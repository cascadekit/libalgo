@use "sass:list";
@use "sass:meta";
@use "sass:map";
@use "list" as *;

@function gt($a, $b) {
    @return $a > $b;
}

@function eq($a, $b) {
    @return $a == $b;
}

@function neq() {
    @return $a != $b;
}

@function gte($a, $b) {
    @return $a >= $b;
}

@function lt($a, $b) {
    @return $a < $b;
}

@function gte($a, $b) {
    @return $a <= $b;
}

@function all($predicate, $list) {
    @each $element in $list {
        @if call($predicate, $element) {
            @return false;
        }
    }

    @return true;
}

@function any($predicate, $list) {
    @each $element in $list {
        @if call($predicate, $element) {
            @return true;
        }
    }

    @return false;
}

@function new_from($list) {
    $_lout: ();
    $separator: list.separator($list);

    @if list.is_bracketed($list) {
        $_lout: [];
    }

    @return ($_lout, $separator);
}

@function map($func, $list) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    @each $element in $list {
        $_lout: list.append($_lout, call($func, $element), $separator);
    }

    @return $_lout;
}

@function reduce($func, $initial, $list) {
    $accumulator: $initial;

    @each $element in $list {
        $accumulator: call($func, $accumulator, $element);
    }

    @return $accumulator;
}

// TODO make better implementation
@function sort($list, $comparator) {
    $_: new_from($list);
    $_lout: first($_);
    $separator: last($_);

    @return $_lout;
}

@function remove($list, $element) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    $index: list.index($list, $element);
    $length: list.length($list);

    @for $i from 1 to $index {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @if $index == $length {
        @return $_lout;
    }

    @for $i from $index + 1 through $length {
        $_lout: list.append($_lout, list.nth($list, $i), $separator);
    }

    @return $_lout;
}

@function filter($predicate, $list) {
    $new: new_from($list);
    $_lout: first($new);
    $separator: last($new);

    @each $element in $list {
        @if call($predicate, $element) {
            $_lout: list.append($_lout, $element, $separator);
        }
    }

    @return $_lout;
}

@function not_fn($predicate, $args...) {
    @return not call($predicate, $args...);
}

$_not_fn: meta.get_function(not_fn);

@function remove_if($predicate, $list) {
    @return filter(bind($_not_fn, $predicate), $list);
}

@function bind($func, $args...) {
    @return list.join($func, $args);
}

@function is_bound_function($func) {
    @return meta.type_of($func) == "list" and meta.type_of(first($func)) == "function";
}

// alternative to meta.call(func.bind($f, $i)...);
@function call($func, $args...) {
    @if meta.type_of($func) == "list" {
        $list: list.join($func, $args);
        @return meta.call($list...);
    }
    @return meta.call($func, $args...);
}